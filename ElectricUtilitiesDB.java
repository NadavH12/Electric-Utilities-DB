/*
ElectricUtiltiesDB.java 
Nadav Horowitz, Dewayne Dantzler, Gustavo Gonzalez, Khalil Coats

This program implements a GUI for a made up Electric Utilities company. The program interacts with a corresponding relational database
in MySQL Workbench. The program includes features for user authentication, updating database tables in MySQL, & querying the database
for data used in various summaries and reports about the company.

*/
import java.sql.*;
import java.util.*;
public class ElectricUtilitiesDB {
//username = 1
//password = manager
	
    //Main method, handles printing introductory and ending information. 
    //Primary function is to continue or quit the program according to the user's input.
    public static void main(String[] args){
        Scanner console = new Scanner(System.in);
        boolean userAuthenticated = false;
        while(userAuthenticated == false){
            printIntro();
            int mainUserInput = takeMainUserInput(console);
            handleMainUserInput(mainUserInput, console);
            if(mainUserInput == 5)
                break;
        }
        System.out.println("Thank you for using the program");
    }

    //performQuery is the method responsible for interacting with the relational database when the retrieval of values is needed.
    //The method takes a formatted SQL statement as a string for input and returns a ResultSet object with the required data
    //The method prints an error statement if the retrieval query performed has failed.
    public static ResultSet performQuery(String query){
    	ResultSet rs = null;
        try{  
            Connection con = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/electric_utilitiesdb","root","manager"); 
            Statement stmt=con.createStatement();  
            rs=stmt.executeQuery(query);  
//            con.close();  ////////////////////////////REMOVE??
            } catch(Exception e) { 
            System.out.println("Database Query Failed");
        }  
        
        return rs;
    }  
    
    //performUpdate is the method responsible for interacting with the relational database when updating of existing values is needed.
    //The method takes a formatted SQL statement as a string for input and has void return type.
    //The method prints an error statement if the update operating has failed.
    public static void performUpdate(String query){
        try{  
            Connection con = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/electric_utilitiesdb","root","manager"); 
            Statement stmt=con.createStatement();  
            stmt.executeUpdate(query);    
            con.close();  
            } catch(Exception e) { 
            System.out.println("Database Update Failed");
        }  
    }  

    //printIntro method prints the main menu to the console
    public static void printIntro(){
        System.out.println("*****************************************************************************");
        System.out.println("***********");
        System.out.println("Welcome to the DSS for Electric Utilities Company: Compliance");
        System.out.println("with Clean Air Act");
        System.out.println("************");
        System.out.println("*****************************************************************************");
        System.out.println();
        System.out.println("To use this program, please enter only integers (in the menus), and also use \"_\" for any spaces");
        System.out.println("");
        System.out.println("1. Plants, Units & Boilers");
        System.out.println("2. Coal");
        System.out.println("3. Statistics and Data Analysis");
        System.out.println("4. Updates");
        System.out.println("5. Quit");
    }

    //printScenario2Menu method is ran when the user chooses option 1 in the main menu.
    //The method prints a submenu that informs the user of the available reports that can be generated by the program.
    public static void printScenario2Menu(){
        System.out.println("*****************************************************************************");
        System.out.println("Welcome to the DSS for Electric Utilities Company: Compliance");
        System.out.println("\t\t with Clean Air Act");
        System.out.println("\t\t 1. Plants, Units & Boilers");
        System.out.println("*****************************************************************************");
        System.out.println();
        System.out.println("To use this program, please enter only integers (in the menus), and also use \"_\" for any spaces");
        System.out.println("");
        System.out.println("1. Summary Reports");
        System.out.println("2. Sulfur Dioxide Emitted");
        System.out.println("3. Maintenance");
        System.out.println("4. Quit");
    }
    
    //takeMainUserInput is responsible for taking and validating the user's input from the main menu page.
    //The method repeatedly prompts the user for input until valid input is submitted.
    public static int takeMainUserInput(Scanner console){
        boolean validInput = false;
        while(!validInput){
            System.out.println("Type in your option: ");
            int mainUserInput = console.nextInt();
            if(mainUserInput > 0 && mainUserInput < 6){
                return mainUserInput;
            }
            System.out.println("invalid input: " + mainUserInput);
            System.out.println();
        }
        return 99;
    }

    //handleMenuUserInput is responsible for receiving the input that the user provides in the main menu page
    //and directing the user to the correct part of the program. The method calls the appropriate methods according
    //to user input. Method also includes authentication process for updating the database.
    public static void handleMainUserInput(int mainUserInput, Scanner console){
        if (mainUserInput == 1){
            int subMenu1Input = takeSubmenu1Input(console);
            handleSubmenu1Input(subMenu1Input,console);
        }
        if (mainUserInput == 2){
            System.out.println("Coal option not yet implemented");
        }
        if (mainUserInput == 3){
            complianceReport(console);
        }
        if(mainUserInput == 4){
            boolean userAuthenticated = authenticate(console);
            if (!userAuthenticated){
                return;
            } else {
                int updateMenuInput = takeUpdateMainInput(console);
                handleUpdateMenuInput(updateMenuInput,console);
            }
        }
    }

    //takeUpdateMainInput is responsible for printing the update submenu and for taking user input for the update submenu
    public static int takeUpdateMainInput(Scanner console){
        System.out.println("Login Successful");
        System.out.println("Update current information");
        System.out.println("1. Update a specific Plant");
        System.out.println("2. Update a specific Boiler");
        System.out.println("3. Update a specific Coal");
        int chosenOption = console.nextInt();
        return chosenOption;
    }

    //handleUpdateMenuInput is responsible for receiving the input that the user provides in the update menu page
    //and directing the user to the correct update method.
    public static void handleUpdateMenuInput(int updateMenuInput,Scanner console){
        if (updateMenuInput == 1){
            updatePlant(console);
        }
        if(updateMenuInput == 2){
            updateBoiler(console);
        }
        if(updateMenuInput == 3)
            updateCoal(console);
    }
    
    //takeSubmenu1 input is responsible for taking and validating user input when option 1 is chosen in the main menu.
    //Method includes input validation and will repeatedly prompt the user for input until the user's input is valid.
    public static int takeSubmenu1Input(Scanner console){
        boolean validInput = false;
        printScenario2Menu();
        System.out.println();
        while(!validInput){
            int input = console.nextInt();
            if(input > 0 && input < 5)
                return input;
            System.out.println("invalid input: " + input);
            System.out.println();
            System.out.println("Please Choose An Option");
            System.out.println("1. Summary Reports");
            System.out.println("2. sulfur dioxide emitted");
            System.out.println("3. Maintenance");
            System.out.println("4. Quit");
        }
        return 99;
    }

    //handleSubmenu1 takes the input the user has provided to printSubMenu1 method and directs the user
    //to the requested part of the program
    public static void handleSubmenu1Input(int subMenu1Input, Scanner console){
        if(subMenu1Input == 1){
            int reportSubmenuInput = takeReportSubmenuInput(console);
            handleReportSubmenuInput(reportSubmenuInput, console);
        }
        if(subMenu1Input == 2){
            sulfurDioxideEmitted(console);
        }
        if(subMenu1Input == 3){
            System.out.println("This option not yet implemented (maintenance)");
        }
        if(subMenu1Input == 4){
            return;
        }   
    }

    //takeReportSubmenuInput prints the report submenu to the console and takes input from user for which report to print.
    //Provides user's input to handleReportSubmenuInput    
    public static int takeReportSubmenuInput(Scanner console){
        int reportSubmenuInput = 0;
        while(reportSubmenuInput == 0){
            System.out.println("Report types:");
            System.out.println("1. Unit summary report");
            System.out.println("2. Boiler used summary report");
            System.out.println("3. Plant summary report");
            System.out.println("Which report to print?");
            reportSubmenuInput = console.nextInt();
            if(reportSubmenuInput > 0 && reportSubmenuInput < 4){
                return reportSubmenuInput;
            }
        }
        return 99;
    }

    //Method is responsible for receiving the users input from takeReportSubMenu and calls the correct
    //report printing method.
    public static void handleReportSubmenuInput(int reportSubmenuInput, Scanner console){
        if(reportSubmenuInput == 1){
            printUnitSummary();
        }
        if(reportSubmenuInput == 2){
            printBoilerSummary(console);
        }
        if(reportSubmenuInput == 3){
            printPlantSummary();
        }
    }

/*
 *  (Unit summary report): 
 *  For each Unit, present the unit’s 
 *  	name
 *  	total number of boilers
 *   	total energy produced 
 *   	total sulfur dioxide emitted 
 *   	total production cost
 */
    public static void printUnitSummary(){
    	ResultSet rs = null;
    	System.out.println("Unit Summary");
    	
    	String query = "SELECT u.name, count(boilerID) as Total_Boilers, sum(heat_rate) as Total_Energy, sum(sulfur_emitted) as Total_Sulfur "
    			+ " FROM Unit u, Boiler b"
    			+ " WHERE u.unitID = b.UnitID "
    			+ " group by u.name;";
    	
    	rs = performQuery(query);
    	
    	try {
    		System.out.println("Unit Name\tTotal Number Boilers\tTotal Energy Consumed\tTotal Sulfur Emitted");
    		System.out.println("------------------------------------------------------------------------------------------------");
    		while(rs.next())  {
		        String name = rs.getString(1);
		        int totalBoilers = rs.getInt(2);
		        int totalEnergy = rs.getInt(3);
		        int totalSulfurEmitted = rs.getInt(4);
		        System.out.println(name + "\t\t\t" + totalBoilers + "\t\t\t" + totalEnergy + "(KWh)\t\t\t" + totalSulfurEmitted + "(kg)");
    		}	
    	}catch (SQLException ex) {
    		 System.err.println("ERROR: " + ex.getMessage());
    	}
    	System.out.println("------------------------------------------------------------------------------------------------");
    	
    	query = "select u.name, (burn_rate * amount_to_be_burned * coal_unit_cost) as Total_Production_Cost "
    			+ "from Boiler b, Coal c, Boiler_Contains_Coal d, Unit u "
    			+ "where d.Coal_TypeID = c.Coal_TypeID and d.boilerID = b.boilerID and u.unitID = b.UnitID;";
    
    	rs = performQuery(query);
    	
    	System.out.println();
    	try {
    		System.out.println("Unit Name\tTotal Production Cost(US $dollars)");
    		System.out.println("------------------------------------------------------------------------------------------------");
    		while(rs.next())  {
		        String name = rs.getString(1);
		        int totalProductionCost = rs.getInt(2);
		        System.out.println(name + "\t\t\t" + "$"+totalProductionCost);
    		}	
    	}catch (SQLException ex) {
    		 System.err.println("ERROR: " + ex.getMessage());
    	}
    	System.out.println("------------------------------------------------------------------------------------------------");
    }
    
    /*
     * Option 2 (Boiler used summary report): 
     * Prompt the user to select a name of a boiler from the existing ones in the system. 
     * Then presents the following information about the selected boiler: 
     * 		identification number
     * 		name of the unit it belongs to
     * 		name of the plants it belongs to
     * 		total amount of coal burned in the current year
     * 		total amount of sulfur dioxide emitted in the current year.
     */
    public static void printBoilerSummary(Scanner console){
    	ResultSet rs = null;
    	String query;
    	int selectedBoiler = -1;
        boolean validInput = false;
        int numBoilers;
        String[] boilers=null;
        
        try {
            //To determine the names of the boilers dynamically using the DB, need to know the number of boilers 1st
            query = "select count(b.name) as Num_Boilers from Boiler b;";
            rs=performQuery(query);
            rs.next();
            
            numBoilers = rs.getInt(1);
            boilers = new String[numBoilers];

        	while(!validInput){ 
        		System.out.println("Boiler Summary");
    	    	System.out.println("Please Choose a Boiler");
    			System.out.println("Boiler Name");
    			System.out.println("-------------------------");    
    			    			
    	        query = "select b.name from Boiler b;";
    	        rs=performQuery(query);
    	        int i=0;
    			while(rs.next())  {
    		        String boilerName = rs.getString(1);
    		        boilers[i]=boilerName;
    		        System.out.println(i+1 + ") " + boilerName);
    		        i++;
        		}	
    			
        		selectedBoiler = console.nextInt();
		        if(selectedBoiler > 0 && selectedBoiler <= boilers.length){
		        	validInput = true;
		        }
		        else {
			        System.out.println("invalid input: " + selectedBoiler);
			        System.out.println();
		        }
        	}
        	
    	}catch (SQLException ex) {
    		 System.err.println("ERROR: " + ex.getMessage());
    	}
        
        //must account for the index into a JAVA array start from 0 not 1!!
        String selectedBoilerName=boilers[selectedBoiler-1];
         
    	query = "select b.boilerID as Boiler_ID, u.name as Unit, p.name as Plant, sum(bc.amount_to_be_burned) as Total_Amt_Coal_Burned," 
         + "sum(b.sulfur_emitted) as Total_Sulfur_Emitted "
         + "FROM Boiler b, Unit u, Plant p, Boiler_Contains_Coal bc, Coal c "
         + "WHERE b.name = '" + selectedBoilerName + "' AND b.UnitID = u.unitID AND p.PlantID = u.PlantID "
         + "AND bc.Coal_TypeID = c.Coal_TypeID AND bc.boilerID = b.boilerID "
         + "GROUP BY b.boilerID "
         + "ORDER BY b.boilerID;";
    	
   
    	rs=performQuery(query);
    	
    	System.out.println();
    	try {
		System.out.println("Boiler ID\tUnit\t\tPlant\t\tTotal Amount Coal Burned(yearly)\tTotal Amount Sulfur Dioxide Emitted(yearly)");
		System.out.println("-----------------------------------------------------------------------------------------------------------------------------------");
    		while(rs.next())  {
		        String boilerID = rs.getString(1);
		        String unitName = rs.getString(2);
				String plantName = rs.getString(3);
				int coalBurned = rs.getInt(4);
				int sulfurEmitted = rs.getInt(5);
		        System.out.println(boilerID + "\t\t" + unitName + "\t\t" + plantName + "\t\t\t" + coalBurned + "(kg)\t\t\t\t\t" + sulfurEmitted + "(kg)");
    		}	
    	}catch (SQLException ex) {
    		 System.err.println("ERROR: " + ex.getMessage());
    	}
    	
    	System.out.println("-----------------------------------------------------------------------------------------------------------------------------------");
    };
    
    /*
     * Option 3(Plant summary report): 
     * For each plant, present the plant’s: 
     * 		name 
     * 		total number of units 
     * 		total number of boilers 
     * 		total energy produced 
     * 		total sulfur dioxide emitted 
     * 		total production cost.
     */
    public static void printPlantSummary(){    
    	ResultSet rs=null;
    	System.out.println("Plant Summary");
    	
    	String query = "SELECT p.name, count(u.unitID) as Number_Units,count(boilerID) as Number_Boilers, sum(heat_rate) as Total_Energy, sum(sulfur_emitted) as Total_Sulfur "
    			+ " FROM Unit u, Boiler b, Plant p"
    			+ " WHERE u.unitID = b.UnitID and p.plantID = u.PlantID "
    			+ " group by p.name;";
    	
    	rs=performQuery(query);
    	
    	try {
    		System.out.println("Plant Name\tNumber Units\tNumber Boilers\tTotal Energy Produced\tTotal Sulfur Emitted");
    		System.out.println("------------------------------------------------------------------------------------------------");
    		while(rs.next())  {
		        String plantName = rs.getString(1);
		        int totalUnits = rs.getInt(2);
		        int totalBoilers = rs.getInt(3);
		        int totalEnergy = rs.getInt(4);
		        int totalSulfurEmitted = rs.getInt(5);
		        System.out.println(plantName + "\t\t" + totalUnits + "\t\t"+ totalBoilers + "\t\t" + totalEnergy + "(KWh)\t\t\t" + totalSulfurEmitted + "(kg)");
    		}	
    	}catch (SQLException ex) {
    		 System.err.println("ERROR: " + ex.getMessage());
    	}
    	System.out.println("------------------------------------------------------------------------------------------------");
    	
    	query = "select p.name as Plant, (burn_rate * amount_to_be_burned * coal_unit_cost) as Total_Production_Cost "
    			+ "from Boiler b, Coal c, Boiler_Contains_Coal d, Unit u, Plant p "
    			+ "where d.Coal_TypeID = c.Coal_TypeID and d.boilerID = b.boilerID and u.unitID = b.UnitID and p.plantID = u.plantID "
    			+ "ORDER BY p.name;";
    	rs=performQuery(query);
    	
    	System.out.println();
    	try {
    		System.out.println("Plant\tTotal Production Cost(US $dollars)");
    		System.out.println("------------------------------------------------------------------------------------------------");
    		while(rs.next())  {
		        String name = rs.getString(1);
		        int totalProductionCost = rs.getInt(2);
		        System.out.println(name + "\t\t\t" + "$"+totalProductionCost);
    		}	
    	}catch (SQLException ex) {
    		 System.err.println("ERROR: " + ex.getMessage());
    	}
    	
    	System.out.println("------------------------------------------------------------------------------------------------");
    }

    public static void sulfurDioxideEmitted(Scanner console){
        boolean validSulfurReportInput = false;
        while(!validSulfurReportInput){
            System.out.println("Please choose an option");
            System.out.println("1. Minimum sulfur content");
            System.out.println("2. Minimum sulfur dioxide emitted");
            int sulfurReport = console.nextInt();
            if(sulfurReport == 1){
                minimumSulfurContent();
                validSulfurReportInput = true;
            }
            if(sulfurReport == 2){
                minimumSO2Emitted();
                validSulfurReportInput = true;
            }
            if(sulfurReport != 1 && sulfurReport != 2)
                System.out.println("invalid input");
        }
    }

    public static void minimumSulfurContent(){
    	ResultSet rs=null;
    	
    	System.out.println("minimum sulfur content");
		String query = "select c.name, c.coal_unit_cost, MIN(c.sulfur_content) AS Lowest_sulfur "
				+ " from Coal c "
				+ " GROUP BY c.name, c.coal_unit_cost"
				+ " ORDER BY MIN(c.sulfur_content);";
		
		rs=performQuery(query);
		
    	try {
    		System.out.println("Coal\tUnit Cost(US $dollars)");
    		System.out.println("------------------------------------------------------------------------------------------------");
    		rs.next();
	        String name = rs.getString(1);
	        int unitCost = rs.getInt(2);
	        System.out.println(name + "\t\t" + "$"+unitCost);	
    	}catch (SQLException ex) {
    		 System.err.println("ERROR: " + ex.getMessage());
    	}
    	
    	System.out.println("------------------------------------------------------------------------------------------------");

	}
    
    public static void minimumSO2Emitted(){
    	ResultSet rs=null;
    	
    	System.out.println("minimum Sulfur Dioxide Emitted");
		String query = "select b.name, u.name, MIN(sulfur_emitted) as low_emission "
				+ "from Boiler b, Unit u "
				+ "where b.UnitID = u.unitID "
				+ "GROUP BY b.name, u.name "
				+ "ORDER BY MIN(sulfur_emitted);";
		
		rs=performQuery(query);
		
    	try {
    		System.out.println("Boiler\t\tUnit");
    		System.out.println("------------------------------------------------------");
    		rs.next();
	        String boiler = rs.getString(1);
	        String unit = rs.getString(2);
	        System.out.println(boiler + "\t" + unit);	
    	}catch (SQLException ex) {
    		 System.err.println("ERROR: " + ex.getMessage());
    	}
    	
    	System.out.println("------------------------------------------------------");
   	
    }
    
    public static void complianceReport(Scanner console)
    {
    	boolean validReportInput = false;
    	while(!validReportInput){
    	System.out.println("Please Choose A Report to View");
        System.out.println("1. Coal Burned");
        System.out.println("2. Energy Generated");
        System.out.println("3. Sulfur Emissions");
        System.out.println("4. View all");
        int choice = console.nextInt();
        
        if(choice == 1) 
        {
    	printCoalReport();
    	validReportInput = true;
        }
        
        if(choice == 2)
        {
    	printEnergyReport();
    	validReportInput = true;
        }
        
        if (choice == 3)
        {
    	printSulfurReport();
    	validReportInput = true;
    	}
        
        if(choice == 4)
        {
        	printCoalReport();
        	printEnergyReport();
        	printSulfurReport();
        	validReportInput = true;
        }
        
        if(!(choice>=1 && choice <=5))
        {
        	System.out.println("invalid input");
        }
    	}
    	
    }

    public static void printCoalReport()
    {
    	try{
    		Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/electric_utilitiesdb","root","manager");
    		 	
        	//calculates and displays the total amount of coal that has been burned over the year
        	PreparedStatement coalTotalStmt = conn.prepareStatement("select sum(amount_to_be_burned) from Boiler_Contains_Coal");
        	ResultSet coalQuery = coalTotalStmt.executeQuery();
        	coalQuery.next();
        	String coalSum = coalQuery.getString(1);
        	System.out.println("\nTotal Coal Burned: " + coalSum + " kg");
        	System.out.println("--------------------------------");
        	conn.close();
    	}catch(Exception e)
    	{
    		System.out.println("Database query failed.");
    	}
    }

    public static void printEnergyReport()
    {
    	try{
    	Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/electric_utilitiesdb","root","manager");
    	//PreparedStatement plantData = conn.prepareStatement("select name from Plant");
    	    	
    	//calculates and displays total energy produced from all plants
    	PreparedStatement energyTotalStmt = conn.prepareStatement("select sum(heat_rate) from boiler");
    	ResultSet energyQuery = energyTotalStmt.executeQuery();
    	energyQuery.next();
    	String energySum = energyQuery.getString(1);
    	System.out.println("\nTotal Energy Produced: " + energySum + " kWh");
    	System.out.println("--------------------------------");
    	conn.close();
    	}catch( Exception e)
    	{
    		System.out.println("Database query failed.");
    	}
    }
    
    public static void printSulfurReport() 
    {
    	try{
        	Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/electric_utilitiesdb","root","manager");
        	        	
        	//calculates and displays the total amount of sulfur emmitted from all plants and displays it
        	PreparedStatement sulfurTotalStmt = conn.prepareStatement("select sum(plant_sulfur_emitted) from Plant");
        	ResultSet sulfurQuery = sulfurTotalStmt.executeQuery();
        	sulfurQuery.next();
        	String sulfurSum = sulfurQuery.getString(1);
        	System.out.println("\nTotal Sulfur Emmission: " + sulfurSum + " kg");
        	System.out.println("--------------------------------");
        	conn.close();
        	
    	}catch(Exception e)
    	{
    		System.out.println("Database query failed.");
    	}
    }

    //updatePlant method is responsible for taking user input for Plant and formatting it into a SQL statement.
    //The method then calls performUpdate providing it the formatted SQL statement built from the user's input.
    public static void updatePlant(Scanner console){
        System.out.println("Update Plant");
        System.out.println();
        System.out.println("Reminder: Please use only _ for space character");
        System.out.println("Please enter the PlantID for the plant you would like to update: ");
        int plantID = console.nextInt();
        System.out.println("Please enter the updated plant name:");
        String plantName = console.next();
        plantName = "\"" + plantName + "\"";
        System.out.println("Please enter the updated plant address:");
        String plantAddress = console.next();
        plantAddress = "\"" + plantAddress + "\"";
        System.out.println("Please enter the updated plant type:");
        String plantType = console.next();
        plantType = "\"" + plantType + "\"";
        System.out.println("Please enter the updated plant unit quantity:");
        int plantUnitQuantity = console.nextInt();
        System.out.println("Please enter the updated manager ID: ");
        int managerID = console.nextInt();
        System.out.println("Please enter the updated plant sulfur emitted:");
        double plantSulfurEmitted = console.nextDouble();
        String query = "Update Plant Set name =" + plantName + ", address = " + plantAddress +
        ", type = " + plantType + ", unit_quantity = " + plantUnitQuantity + ", Manager_ID = " + managerID +
        ", plant_sulfur_emitted = " + plantSulfurEmitted +
        " Where plantID = " + plantID;
        performUpdate(query);
    }
    
    //updateBoiler method is responsible for taking user input for Boiler and formatting it into a SQL statement.
    //The method then calls performUpdate providing it the formatted SQL statement built from the user's input.
    public static void updateBoiler(Scanner console){
        System.out.println("Update Boiler");
        System.out.println();
        System.out.println("Reminder: Please use only _ for space character");
        System.out.println("Please enter the BoilerID for the Boiler you would like to update: ");
        int boilerID = console.nextInt();
        System.out.println("Please enter the updated name: ");
        String name = console.next();
        name = "\"" + name + "\"";
        System.out.println("Please enter the updated capacity: ");
        int capacity = console.nextInt();
        System.out.println("Please enter the updated purchase_date: (YYYY-MM-DD)");
        String purchaseDate = console.next();
        purchaseDate = "\"" + purchaseDate + "\"";
        System.out.println("Please enter the updated purchase_price: ");
        double purchasePrice = console.nextDouble();
        System.out.println("Please enter the updated description: ");
        String description = console.next();
        description = "\"" + description + "\"";
        System.out.println("Please enter the updated location: ");
        String location = console.next();
        location = "\"" + location + "\"";
        System.out.println("Please enter the updated unitID: ");
        int unitID = console.nextInt();
        System.out.println("Please enter the updated boiler_status: ");
        String boilerStatus = console.next();
        boilerStatus = "\"" + boilerStatus + "\"";
        System.out.println("Please enter the updated age: ");
        int age = console.nextInt();
        System.out.println("Please enter the updated heat_rate: ");
        float heatRate = console.nextFloat();
        System.out.println("Please enter the updated sulfur_emitted: ");
        float sulfurEmitted = console.nextFloat();
        System.out.println("Please enter the updated burn_rate: ");
        float burnRate = console.nextFloat();
        System.out.println("Please enter the updated scrubber_rate: ");
        float scrubberRate = console.nextFloat();
        String query = "Update electric_utilitiesdb.boiler\n";
        query += "Set name = " + name + ", capacity = " + capacity + ", purchase_date = " + purchaseDate +
        ", purchase_price = " + purchasePrice + ", description = " + description + ", location = " + location +
        ", unitID = " + unitID + ", boiler_status = " + boilerStatus  + ", age = " + age + ", heat_rate = " +
        heatRate + ", sulfur_emitted = " + sulfurEmitted + ", burn_rate = " + burnRate + ", scrubber_rate = " +
        scrubberRate + "\nWhere boilerID = " + boilerID;
        performUpdate(query);
    }
    
    //updateCoal method is responsible for taking user input for Coal and formatting it into a SQL statement.
    //The method then calls performUpdate providing it the formatted SQL statement built from the user's input.
    public static void updateCoal(Scanner console){
        System.out.println();
        System.out.println("Reminder: Please use only _ for space character");
        System.out.println("Please enter the CoalID for the Coal you would like to update: ");
        int coalID = console.nextInt();
        System.out.println("Please enter the updated coal name: ");
        String name = console.next();
        name = "'" + name + "'";
        System.out.println("Please enter the updated sulfur content: ");
        double sulfurContent = console.nextDouble();
        System.out.println("Please enter the updated coal unit cost: ");
        double unitCost = console.nextDouble();
        System.out.println("Please enter the updated allowance price: ");
        double allowancePrice = console.nextDouble();
        System.out.println("Please enter the updated amount in stock: ");
        double amountInStock = console.nextDouble();
        String query = "Update electric_utilitiesdb.Coal\n";
        query += "Set name = " + name + ", sulfur_content = " + sulfurContent + ", coal_unit_cost = " + unitCost +
        ", allowance_price = " + allowancePrice + ", amount_in_stock = " + amountInStock + "\nWhere coal_TypeID = " + coalID;
        performUpdate(query);
    }

    //Short authentication method for accessing the update submenu from the main menu.
    public static boolean authenticate(Scanner console){
        System.out.println("Enter User ID integer: ");
        String ID = console.next();
        System.out.println("Enter password string");
        String password = console.next();
        boolean authenticated = (ID.equals("1") && password.equals("manager"));
        if(!authenticated)
            System.out.println("Incorrect Login Details");
        return authenticated;
    }
}